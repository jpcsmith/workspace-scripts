snippet gtmain "GoogleTest default main function."
int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet

snippet facediv "Interface implementation divider"
// ----- ${0} Interface -----
endsnippet

snippet gmock "Insert google mock boilerplate."
#include <gmock/gmock.h>

namespace {
$0
}

auto main(int argc, char **argv) -> int
{
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet
snippet gtest "Insert google test boilerplate."
#include <gtest/gtest.h>

namespace {
$0
}

auto main(int argc, char **argv) -> int
{
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet

snippet impdiv "Inserts an implementation divider"
//
// ----- Implementation -----
//
endsnippet

snippet tem1 "Inserts a template with 1 argument"
template <typename ${1:T}>$0
endsnippet

snippet tem2 "Inserts a template with 2 arguments"
template <typename ${1:T}, typename ${2:U}>$0
endsnippet
snippet tem3 "Inserts a template with 3 arguments"
template <typename ${1:T}, typename ${2:U}, typename ${3:V}>$0
endsnippet

snippet sinc "Includes the header of the current file."
`!p
import os.path;
(root, extension) = os.path.splitext(path);
snip.rv = '#include "{}.h"'.format(root)`
endsnippet

snippet nocopy "Insert deleted copy constructor & assignment."
$1(const $1&) = delete;
auto operator=(const $1&) -> $1& = delete;
endsnippet

snippet "([\w+::]*\w+).ns" "Expands nested namespaces." r
`!p
names = match.group(1).split('::');
snip.rv = '\n'.join('namespace {} {{'.format(n) for n in names)
`
$0
`!p
names = match.group(1).split('::');
snip.rv = '\n'.join('}' for _ in names)
`
endsnippet
